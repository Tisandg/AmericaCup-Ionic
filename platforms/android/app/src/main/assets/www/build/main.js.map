{"version":3,"sources":["../../src/providers/database/database.ts","../../src/providers/app-constants/app-constants.ts","../../node_modules/@angular/core/esm5 lazy","../../src lazy","../../src/pages/Match.ts","../../src/app/main.ts","../../src/app/app.module.ts","../../src/app/app.component.ts","../../src/providers/live-score-api/live-score-api.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite';\nimport { Match } from '../../pages/Match';\nimport { Team } from '../../pages/Team';\nimport { TeamDetail } from '../../pages/TeamDetail';\n\n/*\n  Generated class for the DatabaseProvider provider.\n\n  See https://angular.io/guide/dependency-injection for more info on providers\n  and Angular DI.\n*/\n@Injectable()\nexport class DatabaseProvider {\n\n  db: SQLiteObject = null;\n\n  constructor() {}\n\n  setDatabase(db: SQLiteObject){\n    if(this.db === null){\n      this.db = db;\n    }\n  }\n\n  createTableTeam(){\n    let sql = `CREATE TABLE IF NOT EXISTS team (\n      id INTEGER PRIMARY KEY,name TEXT,image TEXT,group_id INTEGER,favorite INTEGER);`;\n      return this.db.executeSql(sql,[]);\n  }\n  createTableMatch(){\n    let sql = `CREATE TABLE IF NOT EXISTS match (\n      id INTEGER PRIMARY KEY,\n      id_team_a INTEGER,\n      id_team_b INTEGER,\n      name_team_a TEXT,\n      name_team_b TEXT,\n      image_team_a TEXT,\n      image_team_b TEXT,\n      score TEXT,\n      date TEXT,\n      status TEXT`;\n      return this.db.executeSql(sql,[]);\n  }\n  createTableTeamDetail(){\n    let sql = `CREATE TABLE IF NOT EXISTS team_detail (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      id_team INTEGER,\n      image TEXT,\n      matches INTEGER,\n      won INTEGER,\n      drawn INTEGER,\n      lost INTEGER,\n      points INTEGER\n    );`;\n      return this.db.executeSql(sql,[]);\n  }\n\n  getMatches(){\n    let sql = \"SELECT * FROM match\";\n    return this.db.executeSql(sql, [])\n    .then(response => {\n      let matches = [];\n      for (let index = 0; index < response.rows.length; index++) {\n        matches.push( response.rows.item(index) );\n      }\n      return Promise.resolve( matches );\n    })\n    .catch(error => Promise.reject(error));\n  }\n\n  insertMatch(match: Match){\n    let sql = 'INSERT OR UPDATE INTO match(id, id_team_a, id_team_b, name_team_a, name_team_b,'\n    +'image_team_a, image_team_b, score, date, status) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';\n    return this.db.executeSql(sql, [match.id, match.idTeamA, match.idTeamB, match.nameTeamA,\n      match.nameTeamB,match.imageTeamA, match.imageTeamB, match.score, match.date, match.status]);\n  }\n\n  /*private db:SQLiteObject;\n  private isOpen: boolean = false;\n\n  constructor(public http: HttpClient, public storage: SQLite) {\n    if(!this.isOpen){\n      this.storage = new SQLite();\n      this.storage.create({\n        name: \"americacup.db\", \n        location:\"default\"\n      })\n        .then((db:SQLiteObject) => {\n          this.db = db;\n          db.executeSql(\n            `CREATE TABLE IF NOT EXISTS team (\n                id INTEGER PRIMARY KEY,\n                name TEXT,\n                image TEXT,\n                group_id INTEGER,\n                favorite INTEGER\n                );`,[])\n            .then(() => console.log('Executed SQL'))\n            .catch(e => console.log(e));\n\n          db.executeSql(\n            `CREATE TABLE IF NOT EXISTS team_detail (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                id_team INTEGER,\n                image TEXT,\n                matches INTEGER,\n                won INTEGER,\n                drawn INTEGER,\n                lost INTEGER,\n                points INTEGER\n            );`,[])\n            .then(() => console.log('Executed SQL'))\n            .catch(e => console.log(e));\n\n          db.executeSql(\n            `CREATE TABLE IF NOT EXISTS match (\n              id INTEGER PRIMARY KEY,\n              id_team_a INTEGER,\n              id_team_b INTEGER,\n              name_team_a TEXT,\n              name_team_b TEXT,\n              image_team_a TEXT,\n              image_team_b TEXT,\n              score TEXT,\n              date TEXT,\n              status TEXT`, [])\n            .then(() => console.log('Executed SQL'))\n            .catch(e => console.log(e));\n\n          this.isOpen = true;\n        }).catch((err)=>{\n          console.log(\"error detected creating tables\", err);\n        });\n      }\n  }//End constructor\n\n  saveMatch(match: Match){\n    return new Promise((resolve, reject) => {\n      let sql = \"INSERT OR UPDATE INTO match(id, id_team_a, id_team_b, name_team_a, name_team_b,\"\n        +\"image_team_a, image_team_b, score, date, status) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n      this.db.executeSql(sql, [match.id, match.idTeamA, match.idTeamB, match.nameTeamA, match.nameTeamB,\n        match.imageTeamA, match.imageTeamB, match.score, match.date, match.status]).then((data) => {\n          resolve(data);\n        }, (error) => {\n          reject(error);\n        });\n    });\n  }\n\n  saveTeams(team: Team){\n    return new Promise((resolve, reject) => {                \n      let sql = \"INSERT OR UPDATE INTO team(id, name, image, group_id, favorite)\"\n        +\"VALUES(?, ?, ?, ?, ?)\";\n      this.db.executeSql(sql, [team.idTeam, team.name, team.image, team.group_id])\n      .then((data) => {\n          resolve(data);\n        }, (error) => {\n          reject(error);\n        }\n      );\n    });\n  }\n\n  saveTeamDetail(teamDetail: TeamDetail){\n    return new Promise((resolve, reject) => {           \n      let sql = \"INSERT OR UPDATE INTO team_detail(id, id_team,image, matches, won, drawn, lost, points)\"\n        +\"VALUES(?, ?, ?, ?, ?, ?, ?, ?)\";\n      this.db.executeSql(sql, [teamDetail.id, teamDetail.idTeam, teamDetail.image, teamDetail.matches, teamDetail.won,teamDetail.drawn,\n        teamDetail.lost, teamDetail.points])\n      .then((data) => {\n          resolve(data);\n        }, (error) => {\n          reject(error);\n        }\n      );\n    });\n  }\n\n  getMatches(){\n    return new Promise((resolve, reject) => {\n      this.db.executeSql(\"SELECT * FROM match\",[])\n      .then((data) => {\n        var arrayMatches: Array<Match> = [];\n        if(data.rows.lenght > 0){\n          for(var i = 0; i< data.rows.lenght; i++){\n            let match = new Match(data.rows.item(i).id,data.rows.item(i).id_team_a, data.rows.item(i).id_team_b,\n            data.rows.item(i).name_team_a,data.rows.item(i).name_team_b, data.rows.item(i).score,\n            data.rows.item(i).date, data.rows.item(i).status, data.rows.item(i).image_team_a,\n            data.rows.item(i).image_team_b);\n            arrayMatches.push(match);\n          }\n        }\n        resolve(arrayMatches);\n      }, (error) => {\n        reject(error);\n      })\n    });\n  }\n\n  getTeams(idGroup:number){\n    return new Promise((resolve, reject) => {\n      this.db.executeSql(\"SELECT * FROM team WHERE id = ?\",[idGroup])\n      .then((data) => {\n        var arrayTeams: Team[] = [];\n        if(data.rows.lenght > 0){\n          for(var i = 0; i< data.rows.lenght; i++){\n            let team = new Team(data.rows.item(i).id,data.rows.item(i).name, \n              data.rows.item(i).image, data.rows.item(i).group_id, data.rows.item(i).favorite);\n            arrayTeams.push(team);\n          }\n        }\n        resolve(arrayTeams);\n      }, (error) => {\n        reject(error);\n      })\n    });\n  }\n\n  changeFavorite(idFavorite:number, valor:number){\n    return new Promise((resolve, reject) => {                \n      let sql = \"UPDATE Team set favorite = ? WHERE id = ?\";\n      this.db.executeSql(sql, [valor, idFavorite])\n      .then((data) => {\n          resolve(data);\n        }, (error) => {\n          reject(error);\n        }\n      );\n    });\n  }\n\n  getFavoriteTeams(){\n    return new Promise((resolve, reject) => {\n      this.db.executeSql(\"SELECT * FROM team WHERE favorite = ?\",[1])\n      .then((data) => {\n        var favorites: Team[] = [];\n        if(data.rows.lenght > 0){\n          for(var i = 0; i< data.rows.lenght; i++){\n            let team = new Team(data.rows.item(i).id,data.rows.item(i).name, \n              data.rows.item(i).image, data.rows.item(i).group_id, data.rows.item(i).favorite);\n            favorites.push(team);\n          }\n        }\n        resolve(favorites);\n      }, (error) => {\n        reject(error);\n      })\n    });\n  }\n\n  getGroup(idGroup: number){\n    return new Promise((resolve, reject) => {\n      this.db.executeSql(\"SELECT team_detail.*,team.name FROM team_detail INNER JOIN team ON team_detail.id_team = team.id\"\n                +\"WHERE team.group_id = ?\",[idGroup])\n      .then((data) => {\n        var teamGroup: Array<TeamDetail> = [];\n        if(data.rows.lenght > 0){\n          for(var i = 0; i< data.rows.lenght; i++){\n            var team = new TeamDetail(data.rows.item(i).id_team, data.rows.item(i).name,\n            data.rows.item(i).image, data.rows.item(i).matches, data.rows.item(i).won,\n            data.rows.item(i).drawn, data.rows.item(i).lost, data.rows.item(i).points);\n            team.id = data.rows.item(i).id;\n            teamGroup.push(team);\n          }\n        }\n        resolve(teamGroup);\n      }, (error) => {\n        reject(error);\n      })\n    });\n  }*/\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/database/database.ts","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n/*\r\n  Generated class for the AppConstantsProvider provider.\r\n\r\n  See https://angular.io/guide/dependency-injection for more info on providers\r\n  and Angular DI.\r\n*/\r\n@Injectable()\r\nexport class AppConstantsProvider {\r\n\r\n  groupA: string; //Holds the Geocoding API service URL\r\n  groupB: string;  //Holds the Weather API service URL\r\n  groupC: string; //Holds the geocoding API service Key\r\n\r\n  private key: string = \"vAE4U0iDSR3grkyB\";\r\n  private secret: string = \"FaaKCQX4eCxC6x7B8MG2MYFEPIUh2tSI\";\r\n\r\n  constructor(public http: HttpClient) {\r\n    this.groupA = \"https://livescore-api.com/api-client/scores/history.json?key=\"+this.key+\"&secret=\"+this.secret+\"&league=962\";\r\n    this.groupB = \"https://livescore-api.com/api-client/scores/history.json?key=\"+this.key+\"&secret=\"+this.secret+\"&league=961\";\r\n    this.groupC = \"https://livescore-api.com/api-client/scores/history.json?key=\"+this.key+\"&secret=\"+this.secret+\"&league=960\";\r\n  }\r\n\r\n  getGroupA(){\r\n    return this.groupA;\r\n  }ñ\r\n  getGroupB(){\r\n    return this.groupB;\r\n  }\r\n  getGroupC(){\r\n    return this.groupC;\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/app-constants/app-constants.ts","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 115;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/core/esm5 lazy\n// module id = 115\n// module chunks = 4","var map = {\n\t\"../pages/copa-america/copa-america.module\": [\n\t\t279,\n\t\t3\n\t],\n\t\"../pages/favorites/favorites.module\": [\n\t\t282,\n\t\t2\n\t],\n\t\"../pages/groups/groups.module\": [\n\t\t280,\n\t\t1\n\t],\n\t\"../pages/matches/matches.module\": [\n\t\t281,\n\t\t0\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids)\n\t\treturn Promise.reject(new Error(\"Cannot find module '\" + req + \"'.\"));\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(ids[0]);\n\t});\n};\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 156;\nmodule.exports = webpackAsyncContext;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src lazy\n// module id = 156\n// module chunks = 4","export class Match {\r\n    id:number;\r\n    idTeamA:number;\r\n    idTeamB:number;\r\n    nameTeamA: string;\r\n    nameTeamB: string;\r\n    imageTeamA: string;\r\n    imageTeamB: string;\r\n    score: string;\r\n    date: string;\r\n    status: string;\r\n\r\n    constructor(id:number, idTeamA: number,idTeamB:number, nameTeamA: string, nameTeamB: string,\r\n        score: string, date:string, status:string, imageA: string, imageB:string){\r\n        this.id = id;\r\n        this.idTeamA = idTeamA;\r\n        this.idTeamB = idTeamB;\r\n        this.nameTeamA = nameTeamA;\r\n        this.nameTeamB = nameTeamB;\r\n        this.score = score;\r\n        this.date = date;\r\n        this.status = status;\r\n        this.imageTeamA = imageA;\r\n        this.imageTeamB = imageB;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Match.ts","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app.module';\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/main.ts","import { BrowserModule } from '@angular/platform-browser';\r\nimport { ErrorHandler, NgModule } from '@angular/core';\r\nimport { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\r\nimport { SplashScreen } from '@ionic-native/splash-screen';\r\nimport { StatusBar } from '@ionic-native/status-bar';\r\n\r\nimport { MyApp } from './app.component';\r\nimport { AppConstantsProvider } from '../providers/app-constants/app-constants';\r\nimport { LiveScoreApiProvider } from '../providers/live-score-api/live-score-api';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { SQLite } from '@ionic-native/sqlite';\r\nimport { DatabaseProvider } from '../providers/database/database';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MyApp,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    IonicModule.forRoot(MyApp)\r\n  ],\r\n  bootstrap: [IonicApp],\r\n  entryComponents: [\r\n    MyApp,\r\n  ],\r\n  providers: [\r\n    StatusBar,\r\n    SplashScreen,\r\n    SQLite,\r\n    {provide: ErrorHandler, useClass: IonicErrorHandler},\r\n    AppConstantsProvider,\r\n    LiveScoreApiProvider,\r\n    DatabaseProvider\r\n  ]\r\n})\r\nexport class AppModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Component } from '@angular/core';\r\nimport { Platform } from 'ionic-angular';\r\nimport { StatusBar } from '@ionic-native/status-bar';\r\nimport { SplashScreen } from '@ionic-native/splash-screen';\r\nimport { CopaAmericaPage } from '../pages/copa-america/copa-america';\r\nimport { SQLite } from '@ionic-native/sqlite';\r\nimport { DatabaseProvider } from '../providers/database/database';\r\nimport { Match } from '../pages/Match';\r\n\r\n@Component({\r\n  templateUrl: 'app.html'\r\n})\r\nexport class MyApp {\r\n  rootPage:any = \"CopaAmericaPage\";\r\n\r\n  constructor(platform: Platform, \r\n    statusBar: StatusBar, \r\n    splashScreen: SplashScreen,\r\n    public dataService: DatabaseProvider,\r\n    public sqlite: SQLite) {\r\n    platform.ready().then(() => {\r\n      // Okay, so the platform is ready and our plugins are available.\r\n      // Here you can do any higher level native things you might need.\r\n      statusBar.styleDefault();\r\n      splashScreen.hide();\r\n      this.createDatabase();\r\n    });\r\n  }\r\n\r\n  private createDatabase(){\r\n    this.sqlite.create({\r\n      name: 'data.db',\r\n      location: 'default' // the location field is required\r\n    })\r\n    .then((db) => {\r\n      this.dataService.setDatabase(db);\r\n      this.dataService.createTableMatch();\r\n      this.dataService.createTableTeam();\r\n      this.dataService.createTableTeamDetail();\r\n\r\n      let imageA = \"assets/imgs/Flags/colombia.png\";\r\n      let imageB = \"assets/imgs/Flags/brazil.png\";\r\n\r\n      let newMatch = new Match(1, 10, 11, \"colombia\", \"brazil\", \"3 - 0\", \"2017-07-07\", \"FINISHED\", imageA, imageB);\r\n      //let newMatch = new Match(item.id,item.home_id, item.away_id, item.home_name, item.away_name\r\n      //,item.score, item.date, item.status,imageA, imageB);\r\n      this.dataService.insertMatch(newMatch);\r\n    })\r\n    .catch(error =>{\r\n      console.error(error);\r\n    });\r\n  }\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { AppConstantsProvider } from '../app-constants/app-constants';\r\nimport { Observable } from 'rxjs/Rx';\r\nimport 'rxjs/add/operator/map';\r\n\r\n/*\r\n  Generated class for the LiveScoreApiProvider provider.\r\n  See https://angular.io/guide/dependency-injection for more info on providers\r\n  and Angular DI.\r\n*/\r\n\r\n@Injectable()\r\nexport class LiveScoreApiProvider {\r\n\r\n  groupA: string; \r\n  groupB: string; \r\n  groupC: string; \r\n  private constantVar: any; //Holds an AppConstantsProvider object\r\n\r\n  constructor(public http: HttpClient, constantVar: AppConstantsProvider) {\r\n    this.constantVar = constantVar; //Setup the local constantVar variable\r\n    this.groupA = constantVar.getGroupA();\r\n    this.groupB = constantVar.getGroupB();\r\n    this.groupC = constantVar.getGroupC();\r\n  }\r\n\r\n  getGroupA(){\r\n    return this.http.get(this.groupA);\r\n  }\r\n\r\n  getGroupB(){\r\n    return this.http.get(this.groupB);\r\n  }\r\n\r\n  getGroupC(){\r\n    return this.http.get(this.groupC);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/live-score-api/live-score-api.ts"],"sourceRoot":""}